package models;

import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import flexjson.JSONSerializer;

import play.db.jpa.GenericModel;

/**
 * VmdbPersona generated by hbm2java
 */
@Entity
@Table(name = "STDB_CONTACTO")
public class VmdbContacto extends GenericModel {
	
	@Id
	@GeneratedValue(generator="SEQ_CONTACTO", strategy=GenerationType.SEQUENCE)
	@SequenceGenerator(name="SEQ_CONTACTO", sequenceName="SEQ_CONTACTO", allocationSize=1)
	@Column(name = "CO_CONTACTO")
	private Long coContacto;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_PERSONA", nullable = false)
	private VmdbPersona vmdbPersona;
	
	@Column(name = "DE_NOMBRE", nullable = false, length = 150)
	private String deNombre;
	
	@Column(name = "DE_CORREO", nullable = false, length = 100)
	private String deCorreo;
	
	@Column(name = "ST_CONTACTO", nullable = false, length = 1)
	private Character stContacto;
	
	@Column(name = "CO_USUARIO_CREACION", nullable = false, length = 50)
	private String coUsuarioCreacion;
	
	@Column(name = "CO_USUARIO_MODIFICACION", length = 50)
	private String coUsuarioModificacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_CREACION", nullable = false, length = 23)
	private Date daFechaCreacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_MODIFICACION", length = 23)
	private Date daFechaModificacion;		
	
	public VmdbContacto() {
	}    	
	
	public Long getCoContacto() {
		return coContacto;
	}

	public void setCoContacto(Long coContacto) {
		this.coContacto = coContacto;
	}

	public VmdbPersona getVmdbPersona() {
		return vmdbPersona;
	}

	public void setVmdbPersona(VmdbPersona vmdbPersona) {
		this.vmdbPersona = vmdbPersona;
	}

	public String getDeNombre() {
		return deNombre;
	}

	public void setDeNombre(String deNombre) {
		this.deNombre = deNombre;
	}

	public String getDeCorreo() {
		return deCorreo;
	}

	public void setDeCorreo(String deCorreo) {
		this.deCorreo = deCorreo;
	}

	public Character getStContacto() {
		return stContacto;
	}

	public void setStContacto(Character stContacto) {
		this.stContacto = stContacto;
	}

	public String getCoUsuarioCreacion() {
		return coUsuarioCreacion;
	}

	public void setCoUsuarioCreacion(String coUsuarioCreacion) {
		this.coUsuarioCreacion = coUsuarioCreacion;
	}

	public String getCoUsuarioModificacion() {
		return coUsuarioModificacion;
	}

	public void setCoUsuarioModificacion(String coUsuarioModificacion) {
		this.coUsuarioModificacion = coUsuarioModificacion;
	}

	public Date getDaFechaCreacion() {
		return daFechaCreacion;
	}

	public void setDaFechaCreacion(Date daFechaCreacion) {
		this.daFechaCreacion = daFechaCreacion;
	}

	public Date getDaFechaModificacion() {
		return daFechaModificacion;
	}

	public void setDaFechaModificacion(Date daFechaModificacion) {
		this.daFechaModificacion = daFechaModificacion;
	}

	public static List<VmdbContacto> listContacto(String nombre, String idPersona) {
    	List<VmdbContacto> list = VmdbContacto.find("UPPER(deNombre) like ? and stContacto = ? and vmdbPersona.coPersona = ? order by deNombre asc", "%"+nombre.toUpperCase()+"%",'1',Long.parseLong(idPersona)).fetch();
        return list;
    }
	
	public static String eliminar(Long id, String usuario) {
		Map result = new HashMap();
		VmdbContacto contacto = VmdbContacto.findById(id);
		if(contacto != null){
			contacto.setStContacto('0');
			contacto.setCoUsuarioModificacion(usuario);
			contacto.setDaFechaModificacion(new Date());
			contacto.save();
			result.put("status",1);
			result.put("message","El contacto fue eliminado correctamente!");
		}else{
			result.put("status",0);
			result.put("message","No se puede eliminar");
		}
		JSONSerializer mapeo = new JSONSerializer();		
		return mapeo.serialize(result);
	}
	
	public static Map guardarContacto(VmdbContacto contacto, String usuario, String idPersona) {
		Map result = new HashMap();
		result.put("status", 0);
		result.put("message", "Error on Server");
		if(contacto.getCoContacto() == null){
			List<VmdbContacto> list = VmdbContacto.find("vmdbPersona.coPersona = ? and deCorreo = ? and stContacto = ?", Long.parseLong(idPersona),contacto.getDeCorreo().toString(),'1').fetch();
			if(list.size()>0){
				result.put("status", 3);
				result.put("message", "El contacto ya esta registrado");
			}else{
				VmdbPersona objPersona = VmdbPersona.findById(Long.parseLong(idPersona));
				contacto.setVmdbPersona(objPersona);
				contacto.setCoUsuarioCreacion(usuario);
				contacto.setDaFechaCreacion(new Date());
				contacto.save();
				result.put("status", 1);
				result.put("message", "El contacto fue guardado correctamente");
			}			
		}else{
			contacto.setCoUsuarioModificacion(usuario);
			contacto.setDaFechaModificacion(new Date());
			contacto.save();
			result.put("status", 2);
			result.put("message", "El contacto fue actualizado correctamente");
		}		
		return result;
	}
	
}
