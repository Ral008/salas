package models;

import play.*;
import play.db.DB;
import play.db.jpa.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * VmdbPersona generated by hbm2java
 */
@Entity
@Table(name = "STDB_PERSONA", uniqueConstraints = @UniqueConstraint(columnNames = "NU_DNI"))
public class VmdbPersona extends GenericModel {
	
	@Id
	@GeneratedValue(generator="SEQ_PERSONA", strategy=GenerationType.SEQUENCE)
	@SequenceGenerator(name="SEQ_PERSONA", sequenceName="SEQ_PERSONA", allocationSize=1)
	@Column(name = "CO_PERSONA")
	private Long coPersona;
		
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_TIPO_PERSONA", nullable = false)
	private VmdbTipoPersona vmdbTipoPersona;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_GERENCIA", nullable = false)
	private VmdbGerencia vmdbGerencia;
	
	@Column(name = "NU_DNI", nullable = false, unique = true, length = 8)
	private String nuDni;
	
	@Column(name = "DE_NOMBRE", nullable = false, length = 150)
	private String deNombre;
	
	@Column(name = "DE_TELEFONO", length = 10)
	private String deTelefono;
	
	@Column(name = "DE_FOTO", length = 50)
	private String deFoto;
	
	@Column(name = "ST_SEXO", nullable = false, length = 1)
	private Character stSexo;
	
	@Column(name = "DE_CORREO", length = 100)
	private String deCorreo;
	
	@Column(name = "DE_DIRECCION", length = 250)
	private String deDireccion;
	
	@Column(name = "ST_PERSONA", nullable = false, length = 1)
	private Character stPersona;
	
	@Column(name = "CO_USUARIO_CREACION", nullable = false, length = 100)
	private String coUsuarioCreacion;
	
	@Column(name = "CO_USUARIO_MODIFICACION", length = 100)
	private String coUsuarioModificacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_CREACION", nullable = false, length = 23)
	private Date daFechaCreacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_MODIFICACION", length = 23)
	private Date daFechaModificacion;
	
	public VmdbPersona() {
	}		

	public String getDeFoto() {
		return deFoto;
	}

	public void setDeFoto(String deFoto) {
		this.deFoto = deFoto;
	}

	public String getDeDireccion() {
		return deDireccion;
	}

	public void setDeDireccion(String deDireccion) {
		this.deDireccion = deDireccion;
	}

	public Long getCoPersona() {
		return coPersona;
	}

	public void setCoPersona(Long coPersona) {
		this.coPersona = coPersona;
	}

	public VmdbTipoPersona getVmdbTipoPersona() {
		return vmdbTipoPersona;
	}

	public void setVmdbTipoPersona(VmdbTipoPersona vmdbTipoPersona) {
		this.vmdbTipoPersona = vmdbTipoPersona;
	}
	
	public VmdbGerencia getVmdbGerencia() {
		return vmdbGerencia;
	}

	public void setVmdbGerencia(VmdbGerencia vmdbGerencia) {
		this.vmdbGerencia = vmdbGerencia;
	}

	public String getCoUsuarioCreacion() {
		return coUsuarioCreacion;
	}

	public void setCoUsuarioCreacion(String coUsuarioCreacion) {
		this.coUsuarioCreacion = coUsuarioCreacion;
	}

	public String getCoUsuarioModificacion() {
		return coUsuarioModificacion;
	}

	public void setCoUsuarioModificacion(String coUsuarioModificacion) {
		this.coUsuarioModificacion = coUsuarioModificacion;
	}

	public Date getDaFechaCreacion() {
		return daFechaCreacion;
	}

	public void setDaFechaCreacion(Date daFechaCreacion) {
		this.daFechaCreacion = daFechaCreacion;
	}

	public Date getDaFechaModificacion() {
		return daFechaModificacion;
	}

	public void setDaFechaModificacion(Date daFechaModificacion) {
		this.daFechaModificacion = daFechaModificacion;
	}

	public String getDeCorreo() {
		return deCorreo;
	}

	public void setDeCorreo(String deCorreo) {
		this.deCorreo = deCorreo;
	}

	public String getDeNombre() {
		return deNombre;
	}

	public void setDeNombre(String deNombre) {
		this.deNombre = deNombre;
	}

	public String getDeTelefono() {
		return deTelefono;
	}

	public void setDeTelefono(String deTelefono) {
		this.deTelefono = deTelefono;
	}

	public String getNuDni() {
		return nuDni;
	}

	public void setNuDni(String nuDni) {
		this.nuDni = nuDni;
	}

	public Character getStPersona() {
		return stPersona;
	}

	public void setStPersona(Character stPersona) {
		this.stPersona = stPersona;
	}

	public Character getStSexo() {
		return stSexo;
	}

	public void setStSexo(Character stSexo) {
		this.stSexo = stSexo;
	}

	public static List<VmdbPersona> listPersonaxRolxNombre(Long cod,String nombre) {
    	String sql = "select p from VmdrUsuarioRol ur join ur.vmdbRol r join ur.vmdbUsuario u join u.vmdbPersona p where r.coRol=? and p.deNombre like ?";
    	List<VmdbPersona> list = VmdbPersona.find(sql,cod,"%"+nombre+"%").fetch();
    	return list;
    }
    
    public static List<VmdbPersona> listPersonaWithOutUser(String nombre){
    	String sql ="SELECT p FROM VmdbUsuario u RIGHT JOIN u.vmdbPersona p WHERE u.coUsuario IS NULL AND p.deNombre like ?";
    	List<VmdbPersona> list = VmdbPersona.find(sql,"%"+nombre+"%").fetch();
    	return list;
    }
	
    public static List<VmdbPersona> listPersonaxRolxGrupoxNombre(Long coRol,Long coGrupo,String nombre) {
    	StringBuilder sql = new StringBuilder();
		sql.append("select p from VmdrUsuarioRol ur join ur.vmdbRol r join ur.vmdbUsuario u join u.vmdbPersona p where r.coRol=:coRol and p.deNombre like :deNombre ");
    	if(coGrupo!=null){
			sql.append("and p.vmdbGrupo.coGrupo=:coGrupo ");
		}
		JPAQuery query=VmdrUsuarioRol.find(sql.toString());
		query=query.bind("coRol", coRol);
		query=query.bind("deNombre", nombre+"%");
		if(coGrupo!=null){
			query=query.bind("coGrupo", coGrupo);
		}
		List<VmdbPersona> list=query.fetch();
    	return list;
    }
    
    public static List<VmdbPersona> listPersona(String nombre){
    	return VmdbPersona.find("UPPER(deNombre) like ? order by deNombre asc", "%"+nombre.toUpperCase()+"%").fetch();
    }
    
    public static List<VmdbPersona> listPersonaxTipoPersona(Long coTipoPersona, String nombre){
    	return VmdbPersona.find("deNombre like ? AND vmdbTipoPersona.coTipoPersona=?", "%"+nombre+"%",coTipoPersona).fetch();
    }
    
    public static VmdbPersona save(VmdbPersona persona){
    	return persona.save();
    }

	public static List<Map> listarRepresentantes(Long persona,Long ciclo) throws SQLException{		
		List<Map> result = new ArrayList<Map>();
		Connection cn = DB.getConnection();
		StringBuilder query = new StringBuilder();
		query.append("SELECT p.CO_PERSONA,p.DE_NOMBRE FROM dbo.VMDR_SUPERVISOR_PERSONA sp ");
		query.append("INNER JOIN dbo.VMDB_PERSONA p ");
		query.append("ON p.CO_PERSONA = sp.CO_REPRESENTANTE ");
		query.append("WHERE sp.CO_CICLO = ? ");
		query.append("AND sp.CO_SUPERVISOR = ? ");		
		PreparedStatement pr = cn.prepareStatement(query.toString());
		pr.setLong(1, ciclo);
		pr.setLong(2, persona);
		ResultSet rs = pr.executeQuery();
		Map map = null;
		while(rs.next()){
			map = new HashMap();
			map.put("coPersona",rs.getString("CO_PERSONA"));
			map.put("deNombre",rs.getString("DE_NOMBRE"));
			result.add(map);
		}
		
		rs.close();
		pr.close();
		cn.close();
		return result;
	}

	public static VmdbPersona buscarSupervisorByGrupo(Long coGrupo) {
		return VmdbPersona.find("vmdbGrupo.coGrupo = ? AND vmdbTipoPersona.coTipoPersona = 6", coGrupo).first();
	}

	public static Map getDatos(Long persona) throws SQLException {
		Map datos = new HashMap();
		Connection cn = DB.getConnection();
		StringBuilder query = new StringBuilder();
		query.append("SELECT ISNULL(p.CO_GRUPO,0) as GRUPO,ISNULL(pz.CO_ZONA,0) as ZONA,ISNULL(c.CO_CICLO,0) as CICLO FROM VMDB_CICLO c, VMDB_PERSONA p ");
		query.append("INNER JOIN VMDR_PERSONA_ZONA pz ");
		query.append("ON pz.CO_PERSONA = p.CO_PERSONA ");
		query.append("WHERE p.CO_PERSONA = ? AND CONVERT(DATE,GETDATE()) BETWEEN c.DA_FECHA_INICIO AND c.DA_FECHA_FIN");
		PreparedStatement pr = cn.prepareStatement(query.toString());
		pr.setLong(1, persona);
		ResultSet rs = pr.executeQuery();
		while(rs.next()){
			datos.put("grupo", rs.getString("GRUPO"));
			datos.put("zona",rs.getString("ZONA"));
			datos.put("ciclo",rs.getString("CICLO"));
		}
		rs.close();
		pr.close();
		cn.close();
		
		return datos;
	}
}
