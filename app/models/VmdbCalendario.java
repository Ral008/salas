package models;

import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import flexjson.JSONSerializer;

import play.db.jpa.GenericModel;

/**
 * VmdbPersona generated by hbm2java
 */
@Entity
@Table(name = "STDB_CALENDARIO")
public class VmdbCalendario extends GenericModel {
	
	@Id
	@GeneratedValue(generator="SEQ_CALENDARIO", strategy=GenerationType.SEQUENCE)
	@SequenceGenerator(name="SEQ_CALENDARIO", sequenceName="SEQ_CALENDARIO", allocationSize=1)
	@Column(name = "CO_CALENDARIO")
	private Long coCalendario;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_SALA", nullable = false)
	private VmdbSala vmdbSala;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_GERENCIA", nullable = true)
	private VmdbGerencia vmdbGerencia;
	
	@Column(name = "DE_FECHA", nullable = false, length = 50)
	private String deFecha;
	
	@Column(name = "HORA", nullable = false, length = 50)
	private String hora;
	
	@Column(name = "ST_CALENDARIO", nullable = false, length = 1)
	private Character stCalendario;
	
	@Column(name = "CO_USUARIO_CREACION", nullable = false, length = 50)
	private String coUsuarioCreacion;
	
	@Column(name = "CO_USUARIO_MODIFICACION", length = 50)
	private String coUsuarioModificacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_CREACION", nullable = false, length = 23)
	private Date daFechaCreacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_MODIFICACION", length = 23)
	private Date daFechaModificacion;		
	
	public VmdbCalendario() {
	}    		
	
	public Long getCoCalendario() {
		return coCalendario;
	}

	public void setCoCalendario(Long coCalendario) {
		this.coCalendario = coCalendario;
	}

	public VmdbSala getVmdbSala() {
		return vmdbSala;
	}

	public void setVmdbSala(VmdbSala vmdbSala) {
		this.vmdbSala = vmdbSala;
	}

	public VmdbGerencia getVmdbGerencia() {
		return vmdbGerencia;
	}

	public void setVmdbGerencia(VmdbGerencia vmdbGerencia) {
		this.vmdbGerencia = vmdbGerencia;
	}

	public String getDeFecha() {
		return deFecha;
	}

	public void setDeFecha(String deFecha) {
		this.deFecha = deFecha;
	}	
	
	public String getHora() {
		return hora;
	}

	public void setHora(String hora) {
		this.hora = hora;
	}

	public Character getStCalendario() {
		return stCalendario;
	}

	public void setStCalendario(Character stCalendario) {
		this.stCalendario = stCalendario;
	}

	public String getCoUsuarioCreacion() {
		return coUsuarioCreacion;
	}

	public void setCoUsuarioCreacion(String coUsuarioCreacion) {
		this.coUsuarioCreacion = coUsuarioCreacion;
	}

	public String getCoUsuarioModificacion() {
		return coUsuarioModificacion;
	}

	public void setCoUsuarioModificacion(String coUsuarioModificacion) {
		this.coUsuarioModificacion = coUsuarioModificacion;
	}

	public Date getDaFechaCreacion() {
		return daFechaCreacion;
	}

	public void setDaFechaCreacion(Date daFechaCreacion) {
		this.daFechaCreacion = daFechaCreacion;
	}

	public Date getDaFechaModificacion() {
		return daFechaModificacion;
	}

	public void setDaFechaModificacion(Date daFechaModificacion) {
		this.daFechaModificacion = daFechaModificacion;
	}

	public static List<VmdbCalendario> listCalendario(String nombre) {
    	List<VmdbCalendario> list = VmdbCalendario.find("UPPER(vmdbSala.deNombre) like ? and stCalendario in(?,?,?,?) and TO_DATE(deFecha, 'dd/mm/yy') >= TO_DATE(sysdate, 'dd/mm/yy') order by vmdbSala.deNombre asc", "%"+nombre.toUpperCase()+"%",'0','1','2','3').fetch();
        return list;
    }
	
	public static String eliminar(Long id, String usuario) {
		Map result = new HashMap();
		VmdbCalendario calendario = VmdbCalendario.findById(id);
		if(calendario != null){
			calendario.setStCalendario('0');
			calendario.setCoUsuarioModificacion(usuario);
			calendario.setDaFechaModificacion(new Date());
			calendario.save();
			result.put("status",1);
			result.put("message","La fecha fue eliminado correctamente!");
		}else{
			result.put("status",0);
			result.put("message","No se puede eliminar");
		}
		JSONSerializer mapeo = new JSONSerializer();		
		return mapeo.serialize(result);
	}
	
	public static Map guardarCalendario(VmdbCalendario calendario, String usuario) {
		Map result = new HashMap();
		result.put("status", 0);
		result.put("message", "Error on Server");
		if(calendario.getCoCalendario() == null){
			List<VmdbCalendario> list = VmdbCalendario.find("vmdbSala.coSala = ? and deFecha = ? and hora = ? and stCalendario in(?,?)",calendario.getVmdbSala().getCoSala(),calendario.getDeFecha(),calendario.getHora(),'1','3').fetch();
			if(list.size()>0){
				result.put("status", 3);
				result.put("message", "El calendario SALA - FECHA - HORA ya esta registrado");
			}else{
				calendario.setCoUsuarioCreacion(usuario);
				calendario.setDaFechaCreacion(new Date());
				calendario.save();
				result.put("status", 1);
				result.put("message", "La fecha fue guardado correctamente");
			}			
		}else{
			calendario.setCoUsuarioModificacion(usuario);
			calendario.setDaFechaModificacion(new Date());
			calendario.save();
			result.put("status", 2);
			result.put("message", "La fecha fue actualizado correctamente");
		}		
		return result;
	}
	
}
