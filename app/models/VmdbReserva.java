package models;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import play.db.DB;
import play.db.jpa.GenericModel;
import flexjson.JSONSerializer;

/**
 * VmdbPersona generated by hbm2java
 */
@Entity
@Table(name = "STDB_RESERVA")
public class VmdbReserva extends GenericModel {
	
	@Id
	@GeneratedValue(generator="SEQ_RESERVA", strategy=GenerationType.SEQUENCE)
	@SequenceGenerator(name="SEQ_RESERVA", sequenceName="SEQ_RESERVA", allocationSize=1)
	@Column(name = "CO_RESERVA")
	private Long coReserva;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_GERENCIA", nullable = false)
	private VmdbGerencia vmdbGerencia;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_PERSONA", nullable = false)
	private VmdbPersona vmdbPersona;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_TIPO_EVENTO", nullable = false)
	private VmdbTipoEvento vmdbTipoEvento;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_SALA", nullable = false)
	private VmdbSala vmdbSala;
		
	@Column(name = "DE_EVENTO", nullable = false, length = 400)
	private String deEvento;
	
	@Column(name = "HORA_DESDE", nullable = false, length = 20)
	private String horaDesde;
	
	@Column(name = "HORA_HASTA", nullable = false, length = 20)
	private String horaHasta;	
	
	@Column(name = "DE_INVITADOS", nullable = false, length = 800)
	private String deInvitados;
	
	@Column(name = "INFO_INICIAL", nullable = true, length = 800)
	private String infoInicial;
	
	@Column(name = "INFO_FINAL", nullable = true, length = 800)
	private String infoFinal;
	
	@Column(name = "ST_RESERVA", nullable = false, length = 1)
	private Character stReserva;
	
	@Column(name = "CO_USUARIO_CREACION", nullable = false, length = 50)
	private String coUsuarioCreacion;
	
	@Column(name = "CO_USUARIO_MODIFICACION", length = 50)
	private String coUsuarioModificacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_CREACION", nullable = false, length = 23)
	private Date daFechaCreacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_MODIFICACION", length = 23)
	private Date daFechaModificacion;
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "vmdbReserva", cascade= CascadeType.ALL)
	private Set<VmdbDetalleReserva> vmdbDetalleReservas = new HashSet<VmdbDetalleReserva>(0);
	
	public VmdbReserva() {
	}				
	
	public Long getCoReserva() {
		return coReserva;
	}

	public void setCoReserva(Long coReserva) {
		this.coReserva = coReserva;
	}

	public VmdbGerencia getVmdbGerencia() {
		return vmdbGerencia;
	}

	public void setVmdbGerencia(VmdbGerencia vmdbGerencia) {
		this.vmdbGerencia = vmdbGerencia;
	}
	
	public VmdbPersona getVmdbPersona() {
		return vmdbPersona;
	}

	public void setVmdbPersona(VmdbPersona vmdbPersona) {
		this.vmdbPersona = vmdbPersona;
	}

	public VmdbTipoEvento getVmdbTipoEvento() {
		return vmdbTipoEvento;
	}

	public void setVmdbTipoEvento(VmdbTipoEvento vmdbTipoEvento) {
		this.vmdbTipoEvento = vmdbTipoEvento;
	}

	public VmdbSala getVmdbSala() {
		return vmdbSala;
	}

	public void setVmdbSala(VmdbSala vmdbSala) {
		this.vmdbSala = vmdbSala;
	}

	public String getDeEvento() {
		return deEvento;
	}

	public void setDeEvento(String deEvento) {
		this.deEvento = deEvento;
	}

	public String getHoraDesde() {
		return horaDesde;
	}

	public void setHoraDesde(String horaDesde) {
		this.horaDesde = horaDesde;
	}

	public String getHoraHasta() {
		return horaHasta;
	}

	public void setHoraHasta(String horaHasta) {
		this.horaHasta = horaHasta;
	}
	
	public String getDeInvitados() {
		return deInvitados;
	}

	public void setDeInvitados(String deInvitados) {
		this.deInvitados = deInvitados;
	}
	
	public String getInfoInicial() {
		return infoInicial;
	}

	public void setInfoInicial(String infoInicial) {
		this.infoInicial = infoInicial;
	}

	public String getInfoFinal() {
		return infoFinal;
	}

	public void setInfoFinal(String infoFinal) {
		this.infoFinal = infoFinal;
	}

	public Character getStReserva() {
		return stReserva;
	}

	public void setStReserva(Character stReserva) {
		this.stReserva = stReserva;
	}

	public String getCoUsuarioCreacion() {
		return coUsuarioCreacion;
	}

	public void setCoUsuarioCreacion(String coUsuarioCreacion) {
		this.coUsuarioCreacion = coUsuarioCreacion;
	}

	public String getCoUsuarioModificacion() {
		return coUsuarioModificacion;
	}

	public void setCoUsuarioModificacion(String coUsuarioModificacion) {
		this.coUsuarioModificacion = coUsuarioModificacion;
	}

	public Date getDaFechaCreacion() {
		return daFechaCreacion;
	}

	public void setDaFechaCreacion(Date daFechaCreacion) {
		this.daFechaCreacion = daFechaCreacion;
	}

	public Date getDaFechaModificacion() {
		return daFechaModificacion;
	}

	public void setDaFechaModificacion(Date daFechaModificacion) {
		this.daFechaModificacion = daFechaModificacion;
	}

	public Set<VmdbDetalleReserva> getVmdbDetalleReservas() {
		return vmdbDetalleReservas;
	}

	public void setVmdbDetalleReservas(Set<VmdbDetalleReserva> vmdbDetalleReservas) {
		this.vmdbDetalleReservas = vmdbDetalleReservas;
	}

	public static List<VmdbReserva> listReserva(String name, String idPersona) {
    	List<VmdbReserva> list = VmdbReserva.find("UPPER(vmdbSala.deNombre) like ? and stReserva = ? and vmdbPersona.coPersona = ? order by vmdbSala.deNombre asc", "%"+name.toUpperCase()+"%", '1',Long.parseLong(idPersona)).fetch();
        return list;
    }
	
	public static String eliminar(Long id, String usuario) {
		Map result = new HashMap();
		VmdbReserva reserva = VmdbReserva.findById(id);
		if(reserva != null){
			reserva.setStReserva('0');
			reserva.setCoUsuarioModificacion(usuario);
			reserva.setDaFechaModificacion(new Date());
			for (VmdbDetalleReserva detalleReserva : reserva.getVmdbDetalleReservas()) {
				if(detalleReserva.getStDetalleReserva().equals('1')){
					int band = habilitarDiasReservaCalendario(reserva.getVmdbSala().getCoSala(), detalleReserva.getDeFecha(), detalleReserva.getHoraDesde(), detalleReserva.getHoraHasta(), usuario);
					detalleReserva.setStDetalleReserva('0');
					detalleReserva.save();
	            	System.out.println(band);
				}
			}			
			reserva.save();
			result.put("status",1);
			result.put("message","La reserva fue anulado correctamente!");
		}else{
			result.put("status",0);
			result.put("message","No puede ser anulado");
		}
		JSONSerializer mapeo = new JSONSerializer();		
		return mapeo.serialize(result);
	}
	
	public static int habilitarDiasReservaCalendario(Long coSala, String fecha, String hDesde, String hHasta, String usuario) {
		int band = 0;
		int n1 = hDesde.indexOf(":");
		int desdeIn = Integer.parseInt(hDesde.substring(0, n1));
		int n2 = hHasta.indexOf(":");
		int hastaIn = Integer.parseInt(hHasta.substring(0, n2));
		String hora = "";
		for (int i = desdeIn; i < hastaIn; i++) {
			hora = i+":00";
			VmdbCalendario objCalendario = VmdbCalendario.find("vmdbSala.coSala = ? and deFecha = ? and hora = ? and stCalendario = ?", coSala,fecha,hora,'3').first();
			objCalendario.setVmdbGerencia(null);
        	objCalendario.setStCalendario('1');//libre
        	objCalendario.setCoUsuarioCreacion(usuario);    		
        	objCalendario.setDaFechaCreacion(new Date());
        	objCalendario.save();
        	band = 1;
		}
		return band;
	}
	
	public static List<Map> listaDeReservaSemanales(Long coSala, String fechaInicial, String fechaFinal) throws SQLException{ 
		Connection con = DB.getConnection();
		StringBuilder query = new StringBuilder();
		query.append("select (select s.de_nombre from stdb_sala s where s.co_sala = r.co_sala) as sala, ");
		query.append("dr.de_fecha as fecha, TO_CHAR(to_date(dr.de_fecha, 'dd/mm/yyyy'), 'D') as dia, ");
		query.append("to_number(SUBSTR(dr.hora_desde,0,INSTR(dr.hora_desde,':')-1)) as desde, ");
		query.append("to_number(SUBSTR(dr.hora_hasta,0,INSTR(dr.hora_hasta,':')-1)) as hasta ");
		query.append("from stdb_reserva r, stdd_detalle_reserva dr ");
		query.append("where r.co_reserva = dr.co_reserva and r.st_reserva = '1' and dr.st_detalle_reserva = '1' and ");
		query.append("to_date(dr.de_fecha, 'dd/mm/yyyy')>= to_date(?,'dd/mm/yyyy') and to_date(dr.de_fecha, 'dd/mm/yyyy')<=to_date(?,'dd/mm/yyyy') and ");
		query.append("co_sala = ? ");		
		PreparedStatement pr = con.prepareStatement(query.toString());
		pr.setString(1,fechaInicial);
		pr.setString(2,fechaFinal);
		pr.setLong(3,coSala);
		ResultSet rs = pr.executeQuery();
		List<Map> result = new ArrayList<Map>();
		Map map = null;
		while(rs.next()){
			map = new HashMap();
			map.put("sala", rs.getString("sala"));
			map.put("fecha", rs.getString("fecha"));	
			map.put("dia", rs.getString("dia"));	
			map.put("desde", rs.getString("desde"));
			map.put("hasta", rs.getString("hasta"));			
			result.add(map);
		}	
		rs.close();
		pr.close();
		con.close();	
		return result;
	}	
	
	public static List<Map> listaParaRecordarioDeEvento() throws SQLException{ 
		Connection con = DB.getConnection();
		StringBuilder query = new StringBuilder();
		query.append("select r.co_reserva as coReserva, dr.co_detalle_reserva as coDetalleReserva, ");
		query.append("r.de_invitados as invitados, dr.de_fecha as fecha, dr.hora_desde as hora ");
		query.append("from stdb_reserva r, stdd_detalle_reserva dr ");
		query.append("where r.co_reserva = dr.co_reserva and ");
		query.append("r.st_reserva = '1' and dr.st_detalle_reserva = '1' and dr.st_enviado = '0' and ");
		query.append("dr.de_fecha = to_char(sysdate,'dd/mm/yyyy') ");			
		PreparedStatement pr = con.prepareStatement(query.toString());	
		ResultSet rs = pr.executeQuery();
		List<Map> result = new ArrayList<Map>();
		Map map = null;
		while(rs.next()){
			map = new HashMap();
			map.put("coReserva", rs.getString("coReserva"));
			map.put("coDetalleReserva", rs.getString("coDetalleReserva"));
			map.put("invitados", rs.getString("invitados"));	
			map.put("fecha", rs.getString("fecha"));	
			map.put("hora", rs.getString("hora"));			
			result.add(map);
		}	
		rs.close();
		pr.close();
		con.close();	
		return result;
	}

}
