package models;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import play.db.DB;
import play.db.jpa.GenericModel;
import flexjson.JSONSerializer;

/**
 * VmdbPersona generated by hbm2java
 */
@Entity
@Table(name = "STDB_RESERVA")
public class VmdbReserva extends GenericModel {
	
	@Id
	@GeneratedValue(generator="SEQ_RESERVA", strategy=GenerationType.SEQUENCE)
	@SequenceGenerator(name="SEQ_RESERVA", sequenceName="SEQ_RESERVA", allocationSize=1)
	@Column(name = "CO_RESERVA")
	private Long coReserva;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_GERENCIA", nullable = false)
	private VmdbGerencia vmdbGerencia;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_TIPO_EVENTO", nullable = false)
	private VmdbTipoEvento vmdbTipoEvento;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_SALA", nullable = false)
	private VmdbSala vmdbSala;
		
	@Column(name = "DE_EVENTO", nullable = false, length = 400)
	private String deEvento;
	
	@Column(name = "HORA_DESDE", nullable = false, length = 20)
	private String horaDesde;
	
	@Column(name = "HORA_HASTA", nullable = false, length = 20)
	private String horaHasta;	
	
	@Column(name = "DE_INVITADOS", nullable = false, length = 800)
	private String deInvitados;
	
	@Column(name = "ST_RESERVA", nullable = false, length = 1)
	private Character stReserva;
	
	@Column(name = "CO_USUARIO_CREACION", nullable = false, length = 50)
	private String coUsuarioCreacion;
	
	@Column(name = "CO_USUARIO_MODIFICACION", length = 50)
	private String coUsuarioModificacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_CREACION", nullable = false, length = 23)
	private Date daFechaCreacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_MODIFICACION", length = 23)
	private Date daFechaModificacion;
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "vmdbReserva", cascade= CascadeType.ALL)
	private Set<VmdbDetalleReserva> vmdbDetalleReservas = new HashSet<VmdbDetalleReserva>(0);
	
	public VmdbReserva() {
	}				
	
	public Long getCoReserva() {
		return coReserva;
	}

	public void setCoReserva(Long coReserva) {
		this.coReserva = coReserva;
	}

	public VmdbGerencia getVmdbGerencia() {
		return vmdbGerencia;
	}

	public void setVmdbGerencia(VmdbGerencia vmdbGerencia) {
		this.vmdbGerencia = vmdbGerencia;
	}

	public VmdbTipoEvento getVmdbTipoEvento() {
		return vmdbTipoEvento;
	}

	public void setVmdbTipoEvento(VmdbTipoEvento vmdbTipoEvento) {
		this.vmdbTipoEvento = vmdbTipoEvento;
	}

	public VmdbSala getVmdbSala() {
		return vmdbSala;
	}

	public void setVmdbSala(VmdbSala vmdbSala) {
		this.vmdbSala = vmdbSala;
	}

	public String getDeEvento() {
		return deEvento;
	}

	public void setDeEvento(String deEvento) {
		this.deEvento = deEvento;
	}

	public String getHoraDesde() {
		return horaDesde;
	}

	public void setHoraDesde(String horaDesde) {
		this.horaDesde = horaDesde;
	}

	public String getHoraHasta() {
		return horaHasta;
	}

	public void setHoraHasta(String horaHasta) {
		this.horaHasta = horaHasta;
	}
	
	public String getDeInvitados() {
		return deInvitados;
	}

	public void setDeInvitados(String deInvitados) {
		this.deInvitados = deInvitados;
	}

	public Character getStReserva() {
		return stReserva;
	}

	public void setStReserva(Character stReserva) {
		this.stReserva = stReserva;
	}

	public String getCoUsuarioCreacion() {
		return coUsuarioCreacion;
	}

	public void setCoUsuarioCreacion(String coUsuarioCreacion) {
		this.coUsuarioCreacion = coUsuarioCreacion;
	}

	public String getCoUsuarioModificacion() {
		return coUsuarioModificacion;
	}

	public void setCoUsuarioModificacion(String coUsuarioModificacion) {
		this.coUsuarioModificacion = coUsuarioModificacion;
	}

	public Date getDaFechaCreacion() {
		return daFechaCreacion;
	}

	public void setDaFechaCreacion(Date daFechaCreacion) {
		this.daFechaCreacion = daFechaCreacion;
	}

	public Date getDaFechaModificacion() {
		return daFechaModificacion;
	}

	public void setDaFechaModificacion(Date daFechaModificacion) {
		this.daFechaModificacion = daFechaModificacion;
	}

	public Set<VmdbDetalleReserva> getVmdbDetalleReservas() {
		return vmdbDetalleReservas;
	}

	public void setVmdbDetalleReservas(Set<VmdbDetalleReserva> vmdbDetalleReservas) {
		this.vmdbDetalleReservas = vmdbDetalleReservas;
	}

	public static List<VmdbReserva> listReserva(String name) {
    	List<VmdbReserva> list = VmdbReserva.find("UPPER(vmdbSala.deNombre) like ? and stReserva = ? order by vmdbSala.deNombre asc", "%"+name.toUpperCase()+"%", '1').fetch();
        return list;
    }
	
	public static String eliminar(Long id, String usuario) {
		Map result = new HashMap();
		VmdbReserva reserva = VmdbReserva.findById(id);
		if(reserva != null){
			reserva.setStReserva('0');
			reserva.setCoUsuarioModificacion(usuario);
			reserva.setDaFechaModificacion(new Date());
			reserva.save();
			result.put("status",1);
			result.put("message","La reserva fue eliminado correctamente!");
		}else{
			result.put("status",0);
			result.put("message","No puede ser eliminado");
		}
		JSONSerializer mapeo = new JSONSerializer();		
		return mapeo.serialize(result);
	}
	
	public static String bloquear(Long id, String usuario) {
		Map result = new HashMap();
		/*VmdbReserva sala = VmdbReserva.findById(id);
		if(sala != null){
			sala.setStSala('2');
			sala.setCoUsuarioModificacion(usuario);
			sala.setDaFechaModificacion(new Date());
			sala.save();
			result.put("status",1);
			result.put("message","La sala fue bloqueado correctamente!");
		}else{
			result.put("status",0);
			result.put("message","No puede ser bloqueado");
		}*/
		JSONSerializer mapeo = new JSONSerializer();		
		return mapeo.serialize(result);
	}
	
	public static String desBloquear(Long id, String usuario) {
		Map result = new HashMap();
		/*VmdbReserva sala = VmdbReserva.findById(id);
		if(sala != null){
			sala.setStSala('1');
			sala.setCoUsuarioModificacion(usuario);
			sala.setDaFechaModificacion(new Date());
			sala.save();
			result.put("status",1);
			result.put("message","La sala fue Desbloqueado correctamente!");
		}else{
			result.put("status",0);
			result.put("message","No puede ser Desbloqueado");
		}*/
		JSONSerializer mapeo = new JSONSerializer();		
		return mapeo.serialize(result);
	}
	
	public static List<Map> buscarSalaById(Long id) throws SQLException{
		List<Map> result = new ArrayList<Map>();
		/*VmdbReserva sala = VmdbReserva.findById(id);
		Map map = new HashMap();		
		map.put("coSala", sala.getCoSala());
		map.put("coLocal", sala.getVmdbLocal().getCoLocal());	
		map.put("deNombre", sala.getDeNombre());
		map.put("aforo", sala.getAforo());
		map.put("deDimension", sala.getDeDimension());
		map.put("deUbicacion", sala.getDeUbicacion());
		result.add(map);*/
		return result;
	}
	
	public static List<Map> listarDetalleDeLaSala(Long id) throws SQLException {
		List<Map> result = new ArrayList<Map>();
		/*VmdbReserva sala = VmdbReserva.findById(id);
		for (VmdbDetalleSala obj : sala.getVmdbDetalleSalas()) {
	    	Map map = new HashMap();
	    	if(obj.getStDetalleSala().equals('1')){
	    		map.put("id", obj.getCoDetalleSala());
		    	map.put("coMaterial", obj.getVmdbMaterial().getCoMaterial());
		    	map.put("materialName", obj.getVmdbMaterial().getDeNombre());		    	
		    	result.add(map);
	    	}	    	
		}*/
		return result;		
	}

}
