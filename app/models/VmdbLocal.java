package models;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import play.db.jpa.GenericModel;
import flexjson.JSONSerializer;

/**
 * VmdbPersona generated by hbm2java
 */
@Entity
@Table(name = "STDB_LOCAL")
public class VmdbLocal extends GenericModel {
	
	@Id
	@GeneratedValue(generator="SEQ_LOCAL", strategy=GenerationType.SEQUENCE)
	@SequenceGenerator(name="SEQ_LOCAL", sequenceName="SEQ_LOCAL", allocationSize=1)
	@Column(name = "CO_LOCAL")
	private Long coLocal;
	
	@Column(name = "DE_NOMBRE", nullable = false, length = 150)
	private String deNombre;
	
	@Column(name = "DE_DIRECCION", nullable = false, length = 150)
	private String deDireccion;
	
	@Column(name = "ST_LOCAL", nullable = false, length = 1)
	private Character stLocal;
	
	@Column(name = "CO_USUARIO_CREACION", nullable = false, length = 50)
	private String coUsuarioCreacion;
	
	@Column(name = "CO_USUARIO_MODIFICACION", length = 50)
	private String coUsuarioModificacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_CREACION", nullable = false, length = 23)
	private Date daFechaCreacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_MODIFICACION", length = 23)
	private Date daFechaModificacion;		
	
	public VmdbLocal() {
	}    
	
	public Long getCoLocal() {
		return coLocal;
	}

	public void setCoLocal(Long coLocal) {
		this.coLocal = coLocal;
	}

	public String getDeNombre() {
		return deNombre;
	}

	public void setDeNombre(String deNombre) {
		this.deNombre = deNombre;
	}

	public String getDeDireccion() {
		return deDireccion;
	}

	public void setDeDireccion(String deDireccion) {
		this.deDireccion = deDireccion;
	}

	public Character getStLocal() {
		return stLocal;
	}

	public void setStLocal(Character stLocal) {
		this.stLocal = stLocal;
	}

	public String getCoUsuarioCreacion() {
		return coUsuarioCreacion;
	}

	public void setCoUsuarioCreacion(String coUsuarioCreacion) {
		this.coUsuarioCreacion = coUsuarioCreacion;
	}

	public String getCoUsuarioModificacion() {
		return coUsuarioModificacion;
	}

	public void setCoUsuarioModificacion(String coUsuarioModificacion) {
		this.coUsuarioModificacion = coUsuarioModificacion;
	}

	public Date getDaFechaCreacion() {
		return daFechaCreacion;
	}

	public void setDaFechaCreacion(Date daFechaCreacion) {
		this.daFechaCreacion = daFechaCreacion;
	}

	public Date getDaFechaModificacion() {
		return daFechaModificacion;
	}

	public void setDaFechaModificacion(Date daFechaModificacion) {
		this.daFechaModificacion = daFechaModificacion;
	}

	public static List<VmdbLocal> listLocal(String nombre) {
    	List<VmdbLocal> list = VmdbLocal.find("UPPER(deNombre) like ? and stLocal = ?  order by deNombre asc", "%"+nombre.toUpperCase()+"%",'1').fetch();
        return list;
    }
	
	public static String eliminar(Long id, String usuario) {
		Map result = new HashMap();
		VmdbLocal local = VmdbLocal.findById(id);
		if(local != null){
			local.setStLocal('0');
			local.setCoUsuarioModificacion(usuario);
			local.setDaFechaModificacion(new Date());
			local.save();
			result.put("status",1);
			result.put("message","El local fue eliminado correctamente!");
		}else{
			result.put("status",0);
			result.put("message","No se puede eliminar");
		}
		JSONSerializer mapeo = new JSONSerializer();		
		return mapeo.serialize(result);
	}
	
	public static Map guardarLocal(VmdbLocal local, String usuario) {
		Map result = new HashMap();
		result.put("status", 0);
		result.put("message", "Error on Server");
		if(local.getCoLocal() == null){
			List<VmdbLocal> list = VmdbLocal.find("UPPER(deNombre) = ? and stLocal = ?",local.getDeNombre().toString().toUpperCase(),'1').fetch();
			if(list.size()>0){
				result.put("status", 3);
				result.put("message", "El local ya esta registrado");
			}else{
				local.setCoUsuarioCreacion(usuario);
				local.setDaFechaCreacion(new Date());
				local.save();
				result.put("status", 1);
				result.put("message", "El local fue guardado correctamente");
			}						
		}else{
			local.setCoUsuarioModificacion(usuario);
			local.setDaFechaModificacion(new Date());
			local.save();
			result.put("status", 2);
			result.put("message", "El local fue actualizado correctamente");
		}		
		return result;
	}
	
}
