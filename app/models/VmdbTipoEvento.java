package models;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import play.db.jpa.GenericModel;
import flexjson.JSONSerializer;

/**
 * VmdbPersona generated by hbm2java
 */
@Entity
@Table(name = "STDB_TIPO_EVENTO")
public class VmdbTipoEvento extends GenericModel {
	
	@Id
	@GeneratedValue(generator="SEQ_TIPO_EVENTO", strategy=GenerationType.SEQUENCE)
	@SequenceGenerator(name="SEQ_TIPO_EVENTO", sequenceName="SEQ_TIPO_EVENTO", allocationSize=1)
	@Column(name = "CO_TIPO_EVENTO")
	private Long coTipoEvento;
	
	@Column(name = "DE_NOMBRE", nullable = false, length = 100)
	private String deNombre;
	
	@Column(name = "ST_TIPO_EVENTO", nullable = false, length = 1)
	private Character stTipoEvento;
	
	@Column(name = "CO_USUARIO_CREACION", nullable = false, length = 50)
	private String coUsuarioCreacion;
	
	@Column(name = "CO_USUARIO_MODIFICACION", length = 50)
	private String coUsuarioModificacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_CREACION", nullable = false, length = 23)
	private Date daFechaCreacion;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DA_FECHA_MODIFICACION", length = 23)
	private Date daFechaModificacion;		
	
	public VmdbTipoEvento() {
	}    
	
	public Long getCoTipoEvento() {
		return coTipoEvento;
	}

	public void setCoTipoEvento(Long coTipoEvento) {
		this.coTipoEvento = coTipoEvento;
	}

	public String getDeNombre() {
		return deNombre;
	}

	public void setDeNombre(String deNombre) {
		this.deNombre = deNombre;
	}

	public Character getStTipoEvento() {
		return stTipoEvento;
	}

	public void setStTipoEvento(Character stTipoEvento) {
		this.stTipoEvento = stTipoEvento;
	}

	public String getCoUsuarioCreacion() {
		return coUsuarioCreacion;
	}

	public void setCoUsuarioCreacion(String coUsuarioCreacion) {
		this.coUsuarioCreacion = coUsuarioCreacion;
	}

	public String getCoUsuarioModificacion() {
		return coUsuarioModificacion;
	}

	public void setCoUsuarioModificacion(String coUsuarioModificacion) {
		this.coUsuarioModificacion = coUsuarioModificacion;
	}

	public Date getDaFechaCreacion() {
		return daFechaCreacion;
	}

	public void setDaFechaCreacion(Date daFechaCreacion) {
		this.daFechaCreacion = daFechaCreacion;
	}

	public Date getDaFechaModificacion() {
		return daFechaModificacion;
	}

	public void setDaFechaModificacion(Date daFechaModificacion) {
		this.daFechaModificacion = daFechaModificacion;
	}

	public static List<VmdbTipoEvento> listTipoEvento(String nombre) {
    	List<VmdbTipoEvento> list = VmdbTipoEvento.find("UPPER(deNombre) like ? and stTipoEvento = ?  order by deNombre asc", "%"+nombre.toUpperCase()+"%",'1').fetch();
        return list;
    }
	
	public static String eliminar(Long id, String usuario) {
		Map result = new HashMap();
		VmdbTipoEvento tipoEvento = VmdbTipoEvento.findById(id);
		if(tipoEvento != null){
			tipoEvento.setStTipoEvento('0');
			tipoEvento.setCoUsuarioModificacion(usuario);
			tipoEvento.setDaFechaModificacion(new Date());
			tipoEvento.save();
			result.put("status",1);
			result.put("message","El tipo de evento fue eliminado correctamente!");
		}else{
			result.put("status",0);
			result.put("message","No se puede eliminar");
		}
		JSONSerializer mapeo = new JSONSerializer();		
		return mapeo.serialize(result);
	}
	
	public static Map guardarTipoEvento(VmdbTipoEvento tipoEvento, String usuario) {
		Map result = new HashMap();
		result.put("status", 0);
		result.put("message", "Error on Server");
		if(tipoEvento.getCoTipoEvento() == null){
			List<VmdbTipoEvento> list = VmdbTipoEvento.find("UPPER(deNombre) = ? and stTipoEvento = ?",tipoEvento.getDeNombre().toString().toUpperCase(),'1').fetch();
			if(list.size()>0){
				result.put("status", 3);
				result.put("message", "El tipo de evento ya esta registrado");
			}else{
				tipoEvento.setCoUsuarioCreacion(usuario);
				tipoEvento.setDaFechaCreacion(new Date());
				tipoEvento.save();
				result.put("status", 1);
				result.put("message", "El tipo de evento fue guardado correctamente");
			}			
		}else{
			tipoEvento.setCoUsuarioModificacion(usuario);
			tipoEvento.setDaFechaModificacion(new Date());
			tipoEvento.save();
			result.put("status", 2);
			result.put("message", "El tipo de evento fue actualizado correctamente");
		}		
		return result;
	}
	
}
